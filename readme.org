#+TITLE: Emacs Configuration
#+AUTHOR: Quido Meijer
#+EMAIL: quidome@gmail.com

* Description
  This file is parsed by [[./init.el][init.el]] which then evaluates all =emacs-lisp= code blocks during startup.

  This configuration is designed for Emacs 24.5 and above.

** Basic Directory
   #+BEGIN_SRC text
  └── .emacs.d
      ├── auto-backup   # store backup files here
      ├── auto-save     # store auto save files here
      ├── init.el
      ├── readme.org    # this file
      ├── themes/
      ├── packages/     # directory for non ELPA / MELPA packages
      └── backups/      # emacs generated backup files
   #+END_SRC

   Besides these directories Emacs creates some directories and files on its own.

* Credits
  This =emacs.d/= was heavily inspired by the following configurations.

+ [[https://github.com/anschwa/emacs.d][Adam Schwartz's emacs.d]]
+ [[https://github.com/magnars/.emacs.d][Magnar Sveen's emacs.d]]
+ [[https://github.com/jhenahan/emacs.d/blob/master/emacs-init.org][Jack Henahan's init.org]]
+ [[https://github.com/seth/my-emacs-dot-d/blob/master/emacs-init.org][Seth Falcon's emacs-init-org]]
+ [[https://github.com/steckerhalter/steckemacs/blob/master/steckemacs.org][Steckerhalter's Steckemacs]]
+ [[http://endlessparentheses.com/init-org-Without-org-mode.html][Artur Malabarba's init.org Without org-mode]]

* Prerequisites
** Mac OS X
*** Xcode Command Line Tools
**** OS X 10.13 High Sierra
     Open a Terminal window to install the CLI tools.
     #+BEGIN_SRC sh
  xcode-select --install
     #+END_SRC

*** Homebrew
    Install Homebrew for OS X from [[https://brew.sh/][https://brew.sh/]]
    #+BEGIN_SRC sh
  ruby -e "$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)"
    #+END_SRC
    Review and check warnings / errors with =brew doctor=.

* Installing Emacs
** Mac OS X
*** Homebrew Cask
    Prefered Emacs installation method is using a brew cask.
    #+BEGIN_SRC bash
  brew cask install emacs
    #+END_SRC

* File header
  The actual configuration starts here, let's start by writing a warning header.
  #+BEGIN_SRC emacs-lisp
  ;;; ------------------------------------------
  ;;; Do not edit this file. It was tangled from
  ;;; an org file.
  ;;; ------------------------------------------
  #+END_SRC

* Package management
** Package sources
   Add package sources and initialize.
   #+BEGIN_SRC emacs-lisp
     (require 'package)
     (add-to-list 'package-archives '("org" . "http://orgmode.org/elpa/"))
     (add-to-list 'package-archives '("melpa" . "https://melpa.org/packages/"))
     ;; (package-initialize)
   #+END_SRC

** Dependency Management with =use-package=
   My =emacs.d/= depends on [[https://github.com/jwiegley/use-package][use-package]].
   #+BEGIN_QUOTE
   The use-package macro allows you to isolate package configuration in your .emacs file in a way that is both performance-oriented and, well, tidy.
   #+END_QUOTE

   Start using =use-package=.
   #+BEGIN_SRC emacs-lisp
     (unless (and (package-installed-p 'use-package)
		  (package-installed-p 'diminish))
       (package-refresh-contents))
     (when (not (package-installed-p 'use-package)) (package-install 'use-package))
     (when (not (package-installed-p 'diminish)) (package-install 'diminish))

     (eval-when-compile
       (require 'use-package))
     (require 'diminish)
     (require 'bind-key)

     ;; ensure by default
     (setq use-package-always-ensure t)
   #+END_SRC

** Custom Packages
   Add custom packages directory to the =load-path=.
   #+BEGIN_SRC emacs-lisp
  (add-to-list 'load-path (concat user-emacs-directory "packages/"))
  (add-to-list 'load-path (concat user-emacs-directory "packages/magit-gerrit"))

   #+END_SRC

* Generic configuration
** Personal choices
#+BEGIN_SRC emacs-lisp
  ;; Choose whether to theme light or dark
  (setq light-theme nil)
  (setq dark-theme 1)
#+END_SRC

** Housekeeping
   Keep filesystem and config files clean by storing auto backup and auto save files in specified directories instead of anywhere in the filesystem.

   And custom config is saved into it's own custom.el file so that config changes won't be added to =init.el=.
   #+BEGIN_SRC emacs-lisp
     ;; Keep emacs Custom-settings in separate file.
     (setq custom-file (expand-file-name "custom.el" user-emacs-directory))
     (load custom-file 'noerror)

     ;; Save point position between sessions.
     (use-package saveplace)
     (setq-default save-place t)
     (setq save-place-file (expand-file-name "places" user-emacs-directory))

     ;; create auto-backup and auto-save location
     (make-directory "~/.emacs.d/auto-save/" t)
     (make-directory "~/.emacs.d/auto-backup/" t)

     ;; put auto saves into user-emacs-directory/auto-save
     (setq auto-save-file-name-transforms
	   `((".*" ,(concat user-emacs-directory "auto-save/") t)))

     ;; Write backup files to own directory
     (setq backup-directory-alist
	   `(("." . ,(expand-file-name
		      (concat user-emacs-directory "auto-backup")))))

     ;; Make backups of files, even when they're in version control.
     (setq vc-make-backup-files t)

     ;; Disable stupid lockfiles (.#file-name)
     (setq create-lockfiles nil)
   #+END_SRC

** Many things
   Some essential generic configuration.
   #+BEGIN_SRC emacs-lisp
  ;; Turn off mouse interface early in startup to avoid momentary display.
  (if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
  (if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
  (if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))

  ;; No splash screen please.
  (setq inhibit-startup-message t)

  ;; Productive default mode
  (setq initial-major-mode 'org-mode)

  ;; When on a tab, make the cursor the tab length.
  (setq-default x-stretch-cursor t)

  ;; Fix empty pasteboard error.
  (setq save-interprogram-paste-before-kill nil)

  ;; Enable transient mark mode
  (transient-mark-mode 1)

  ;; remove trailing whitespace before we save stuff
  (add-hook 'before-save-hook 'delete-trailing-whitespace)

  ;; set OS we're running on
  (setq is-mac (equal system-type 'darwin))
  (setq is-linux (equal system-type 'gnu/linux))
   #+END_SRC

** Mac OS X specials
*** Import environment variables
    Emacs running in Mac OS X can't access environment variables by default, this package fixes that.
    #+BEGIN_SRC emacs-lisp
  (use-package exec-path-from-shell
    :if is-mac
    :init
    :config
    (setq exec-path-from-shell-check-startup-files nil)
    (push "HISTFILE" exec-path-from-shell-variables)
    (push "GERRIT_SSH_CREDS" exec-path-from-shell-variables)
    (exec-path-from-shell-initialize))
    #+END_SRC

*** Work around unsupported --dired
    #+BEGIN_SRC emacs-lisp
  (when is-mac
    (setq dired-use-ls-dired nil))
    #+END_SRC

* Keybindings
  #+BEGIN_QUOTE
  Just a couple of keybinding changes here, most keybinding should be set in use-package.
  #+END_QUOTE

** Window focus
   Use shift+arrows to move around.
   #+BEGIN_SRC emacs-lisp
  (windmove-default-keybindings)
   #+END_SRC

* Appearance
** Modeline
*** Powerline package
    #+BEGIN_SRC emacs-lisp
  (use-package powerline
    :init
    (setq powerline-display-buffer-size nil)
    (setq powerline-display-mule-info nil)
    (setq powerline-display-hud nil)
    (setq powerline-default-separator 'utf-8)
    :config
    (which-function-mode)
    (powerline-default-theme))
    #+END_SRC

*** Modeline contents
    #+BEGIN_SRC emacs-lisp
  ;; Enable column-number mode
  (column-number-mode t)

  ;; Date/time
  (setq display-time-day-and-date t
        display-time-format "%a %b %d %R"
        display-time-interval 30
        display-time-default-load-average nil)
  (display-time)

  ;; File size
  (size-indication-mode t)

  ;; Show funtion name in a mode line
  (which-function-mode t)
    #+END_SRC

** Themes
Use theme based on settings of light-theme and dark-theme
#+BEGIN_SRC emacs-lisp
  (use-package spacemacs-theme
    :if light-theme
    :defer t
    :init (load-theme 'spacemacs-light t))

  (use-package material-theme
    :if dark-theme
    :defer t
    :init (load-theme 'material t))
#+END_SRC

** Fonts
   Set font for graphical mode.
   #+BEGIN_SRC emacs-lisp
     (when is-mac
       (set-frame-font "Inconsolata for Powerline 16"))

     (when is-linux
       (set-frame-font "Source Code Pro Medium 10"))
   #+END_SRC

* Major modes
** Org mode
   #+BEGIN_SRC emacs-lisp
  (use-package org
    :defer 2
    :init
    (setq org-confirm-babel-evaluate nil))
   #+END_SRC

** Project
ile
#+BEGIN_SRC emacs-lisp
  (use-package projectile
    :ensure t
    :config
    (define-key projectile-mode-map (kbd "s-p") 'projectile-command-map)
    (define-key projectile-mode-map (kbd "C-c p") 'projectile-command-map)
    (projectile-mode +1))
#+END_SRC

** Python
   #+BEGIN_SRC emacs-lisp
  (use-package python-mode
    :mode ("\\.py\\'")
    :interpreter "python3")
   #+END_SRC

** Ruby
#+BEGIN_SRC emacs-lisp
  (use-package ruby-mode)
#+END_SRC

** Magit
   [[https://github.com/magit/magit][Magit]] is the ultimate =git= interface for Emacs.
   #+BEGIN_SRC emacs-lisp
  (use-package magit
    :bind ("C-x g" . magit-status)
    :diminish magit-auto-revert-mode
    :init

    ;; Ask for the branch name first when creating a branch rather than
    ;; specifying upstream
    (setq magit-branch-read-upstream-first nil))
   #+END_SRC

** YAML
   #+BEGIN_SRC emacs-lisp
  (use-package yaml-mode
    :init
    (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
    (add-to-list 'auto-mode-alist '("\\.yaml$" . yaml-mode)))
   #+END_SRC

** Puppet
   #+BEGIN_SRC emacs-lisp
     (use-package puppet-mode)
   #+END_SRC

** Rspec
#+BEGIN_SRC emacs-lisp
  (use-package rspec-mode)
#+END_SRC

** Golang
   #+BEGIN_SRC emacs-lisp
     (defun custom-go-mode ()
       (display-line-numbers-mode 1))


     (use-package go-mode
       :defer t
       :ensure t
       :mode ("\\.go\\'" . go-mode)
       :init
       (setq compile-command "echo Building... && go build -v && echo Testing... && go test -v && echo Linter... && golint")
       (setq compilation-read-command nil)
       (add-hook 'go-mode-hook 'custom-go-mode)
       :bind (("M-," . compile)
	      ("M-." . godef-jump)))
   #+END_SRC

*** go projectile
#+BEGIN_SRC emacs-lisp
  (use-package go-projectile)
#+END_SRC

** Rust
Current rust config is based on [[http://julienblanchard.com/2016/fancy-rust-development-with-emacs/][fancy rust development with emacs.]]
   #+BEGIN_SRC emacs-lisp
     (use-package rust-mode
       :init
       (add-hook 'rust-mode-hook
                 (lambda ()
                   (local-set-key (kbd "C-c <tab>") #'rust-format-buffer))))
   #+END_SRC

** Ediff
   #+BEGIN_SRC emacs-lisp
     (use-package ediff
       :bind (("C-c = b" . ediff-buffers))
       :init
       ;; fix ediff crash in Emacs GUI
       (setq ediff-window-setup-function 'ediff-setup-windows-plain)
       (setq ediff-split-window-function (if (> (frame-width) 150)
                                             'split-window-horizontally
                                           'split-window-vertically)))
   #+END_SRC

** vterm
#+BEGIN_SRC emacs-lisp
(use-package vterm
    :ensure t
)
#+END_SRC

* Minor modes
** LSP

The Language Server protocol is used between a tool (the client) and a language smartness provider (the server) to integrate features like auto complete, go to definition, find all references and alike into the tool.

#+BEGIN_SRC emacs-lisp
  (use-package lsp-mode
    :ensure t
    :commands (lsp lsp-deferred)
    :hook (go-mode . lsp-deferred))

  ;;Set up before-save hooks to format buffer and add/delete imports.
  ;;Make sure you don't have other gofmt/goimports hooks enabled.

  (defun lsp-go-install-save-hooks ()
    (add-hook 'before-save-hook #'lsp-format-buffer t t)
    (add-hook 'before-save-hook #'lsp-organize-imports t t))
  (add-hook 'go-mode-hook #'lsp-go-install-save-hooks)

  ;;Optional - provides fancier overlays.

  (use-package lsp-ui
    :ensure t
    :commands lsp-ui-mode
    :init
  )


  (setq lsp-ui-doc-enable nil
	lsp-ui-peek-enable t
	lsp-ui-sideline-enable t
	lsp-ui-imenu-enable t
	lsp-ui-flycheck-enable t)
#+END_SRC

** Company

[[http://company-mode.github.io/][Company]] is a text completion framework for Emacs. It stands for "complete anything" and works well with lsp-mode.
company-lsp integrates company mode completion with lsp-mode.
completion-at-point also works out of the box but doesn't support snippets.

   #+BEGIN_SRC emacs-lisp
     (use-package company
       :ensure t
       :diminish ""
       :config
       (global-company-mode 1)
       (setq company-idle-delay 0)
       (setq company-minimum-prefix-length 1))
;       :bind ("C-c c" . company-complete))

     (use-package company-lsp
       :ensure t
       :commands company-lsp)
   #+END_SRC

** Snippets

Provides snippet support

    #+BEGIN_SRC emacs-lisp
      (use-package yasnippet
	:ensure t
	:commands yas-minor-mode
	:hook (go-mode . yas-minor-mode))
    #+END_SRC

** Ivy and friends
*** Ivy
    #+BEGIN_SRC emacs-lisp
      (use-package ivy
        :diminish ivy-mode
        :config
        (ivy-mode 1))
    #+END_SRC

*** Swiper
    #+BEGIN_SRC emacs-lisp
      (use-package swiper
	:bind (("C-s" . swiper)
	       ("C-r" . swiper))		; global binds
      )
    #+END_SRC


*** Counsel
    #+BEGIN_SRC emacs-lisp
      (use-package counsel)
    #+END_SRC

** Markdown
   #+BEGIN_SRC emacs-lisp
  (use-package markdown-mode
    :mode ("\\.md\\'" . markdown-mode))
   #+End_SRC
** Magit gerrit

   #+BEGIN_SRC emacs-lisp-nonono
     (use-package magit-gerrit
       :after (magit magit))
       :config (use-package magit-popup)
   #+END_SRC

#+BEGIN_SRC emacs-lisp
(require 'magit-gerrit)

;; if remote url is not using the default gerrit port and
;; ssh scheme, need to manually set this variable
;;(setq-default magit-gerrit-ssh-creds "myid@gerrithost.org")

;; if necessary, use an alternative remote instead of 'origin'
;;(setq-default magit-gerrit-remote "gerrit")

;;(use-package magit-popup)
#+END_SRC

   #+RESULTS:

** Flycheck
   #+BEGIN_SRC emacs-lisp
  (use-package flycheck
    :init
    (add-hook 'after-init-hook 'global-flycheck-mode)

    :config
    ;; Override default flycheck triggers
    (setq flycheck-emacs-lisp-load-path 'inherit
          flycheck-check-syntax-automatically '(save idle-change mode-enabled)
          flycheck-idle-change-delay 5)

    (setq flycheck-display-errors-function #'flycheck-display-error-messages-unless-error-list))
   #+END_SRC
*** Flycheck yamllint
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck-yamllint)
    #+END_SRC
*** Flycheck bash
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck-bashate
        :after flycheck
        :init
        (flycheck-bashate-setup))
    #+END_SRC
*** Flycheck rust
    #+BEGIN_SRC emacs-lisp
      (use-package flycheck-rust
        :init
        (add-hook 'flycheck-mode-hook #'flycheck-rust-setup))
    #+END_SRC
** ansible
*** ansible itself
#+BEGIN_SRC emacs-lisp
  (use-package ansible)
#+END_SRC

*** company-ansible
Use company for code completion.
#+BEGIN_SRC emacs-lisp
  (use-package company-ansible)
#+END_SRC
** jinja2
#+BEGIN_SRC emacs-lisp
  (use-package jinja2-mode
    :mode "\\.j2\\'")
#+END_SRC
** Alist

   #+BEGIN_SRC emacs-lisp
     (use-package let-alist)
   #+END_SRC
** Ruby
*** Robe
#+BEGIN_SRC emacs-lisp
  (use-package robe
    :defer t
    :disabled t
    :after ruby-mode
    :init
    (progn
      (add-hook 'ruby-mode-hook 'robe-mode)
      (with-eval-after-load 'company
  (add-to-list 'company-backends 'company-robe))))
#+END_SRC

*** enhanced ruby mode
#+BEGIN_SRC emacs-lisp
  (use-package enh-ruby-mode
    :defer t
    :mode (("\\.rb\\'"       . enh-ruby-mode)
	   ("\\.ru\\'"       . enh-ruby-mode)
	   ("\\.jbuilder\\'" . enh-ruby-mode)
	   ("\\.gemspec\\'"  . enh-ruby-mode)
	   ("\\.rake\\'"     . enh-ruby-mode)
	   ("Rakefile\\'"    . enh-ruby-mode)
	   ("Gemfile\\'"     . enh-ruby-mode)
	   ("Guardfile\\'"   . enh-ruby-mode)
	   ("Capfile\\'"     . enh-ruby-mode)
	   ("Vagrantfile\\'" . enh-ruby-mode))
    :config (progn
	      (setq enh-ruby-indent-level 2
		    enh-ruby-add-encoding-comment-on-save nil
		    enh-ruby-deep-indent-paren nil
		    enh-ruby-bounce-deep-indent t
		    enh-ruby-hanging-indent-level 2)
	      (setq enh-ruby-program "/home/qmeijer/.rbenv/versions/2.4.9/bin/ruby")
	      (setq ruby-insert-encoding-magic-comment nil)))
#+END_SRC

*** rbenv
#+BEGIN_SRC emacs-lisp
  (use-package rbenv
    :defer t
    :init
    ;; (setq rbenv-installation-dir "/usr")
    (setq rbenv-show-active-ruby-in-modeline nil)
    :config (progn
	      (global-rbenv-mode)
	      (add-hook 'enh-ruby-mode-hook 'rbenv-use-corresponding)))
#+END_SRC

#+RESULTS:

** Neotree
   Thisone actually requires more work, see [[https://github.com/domtronn/all-the-icons.el][https://github.com/domtronn/all-the-icons.el]] on how to install the extra icons needed.
   #+BEGIN_SRC emacs-lisp
     (use-package neotree
       :config
       (use-package all-the-icons)
       (global-set-key [s-XF86TouchpadToggle] 'neotree-toggle)
       (global-set-key [f8] 'neotree-toggle)
       (setq neo-theme (if (display-graphic-p) 'icons 'arrow)))

   #+END_SRC

** Rust addons
*** Cargo
    #+BEGIN_SRC emacs-lisp
      (use-package cargo
        :config
        (add-hook 'rust-mode-hook 'cargo-minor-mode))
    #+END_SRC
*** Racer
    #+BEGIN_SRC emacs-lisp
      (use-package racer
        :config
        (setq racer-cmd "~/.cargo/bin/racer") ;; Rustup binaries PATH
        (setq racer-rust-src-path "/Users/qmeijer/code/rust/src") ;; Rust source code PATH

        (add-hook 'rust-mode-hook #'racer-mode)
        (add-hook 'racer-mode-hook #'eldoc-mode)
        (add-hook 'racer-mode-hook #'company-mode))
    #+END_SRC

** Python
*** Company Jedi
    #+BEGIN_SRC emacs-lisp
      (use-package company-jedi
        :disabled t
        :config
        (defun psachin/python-mode-hook ()
          (add-to-list 'company-backends 'company-jedi))

        (add-hook 'python-mode-hook 'psachin/python-mode-hook))
    #+END_SRC
*** Pyenv
    #+BEGIN_SRC emacs-lisp
      (use-package pyenv-mode)
    #+END_SRC

    #+BEGIN_SRC emacs-lisp
      (use-package pyenv-mode-auto
        :after pyenv-mode)
    #+END_SRC

*** autopep8
    #+BEGIN_SRC emacs-lisp
      (use-package py-autopep8)
    #+END_SRC

*** Elpy
    #+BEGIN_SRC emacs-lisp
      ;; Elpy
      (use-package elpy
        :diminish elpy-mode
        :init
        (setq
         ;; Referred from:
         ;; https://github.com/ajschumacher/.emacs.d/blob/master/init.el
         ;; sudo dnf install python-jedi python3-jedi -y
         elpy-rpc-backend "jedi"
         help-at-pt-timer-delay 0.9
         help-at-pt-display-when-idle t
         tab-width 4)

        :config
        (elpy-enable)
        ;; Don't use flymake if flycheck is available
        (when (require 'flycheck nil t)
          (setq elpy-module
                (delq 'elpy-module-flymake elpy-modules)))

        ;; Enable flycheck and pep8
        (add-hook 'elpy-mode-hook 'flycheck-mode)

        ;; Following gives problem when python code used in reveal.js
        ;; presentation.
        ;; (add-hook 'elpy-mode-hook 'py-autopep8-enable-on-save)

        ;; Do not highlight indentation
        (delete 'elpy-module-highlight-indentation elpy-modules)

        ;; I use this keys for window (re)size
        (eval-after-load "elpy"
          '(cl-dolist (key '("C-<up>" "C-<down>" "C-<left>" "C-<right>"))
             (define-key elpy-mode-map (kbd key) nil))))
    #+END_SRC
* Other packages
** ripgrep
#+BEGIN_SRC emacs-lisp
  (use-package rg
    :if (executable-find "rg")
    :commands (rg)
    ;;
    :config
    ;; List of command line flags for rg.
    (setq rg-command-line-flags '())
    ;; Group matches in the same file together.
    (setq rg-group-result t)
    ;; wgrep compatibility (requires wgrep-ag.el)
  )
#+END_SRC

** wgrep
#+BEGIN_SRC emacs-lisp
  (use-package wgrep
    :commands (wgrep-setup)
    :init
    (add-hook 'grep-setup-hook 'wgrep-setup)
    :config
    ;; r/C-x C-q/C-c C-i to enter edit mode. C-x C-s to save, C-c C-k
    (define-key grep-mode-map (kbd "r") 'wgrep-change-to-wgrep-mode)
    (define-key grep-mode-map (kbd "C-x C-q") 'wgrep-change-to-wgrep-mode)
    (define-key grep-mode-map (kbd "C-c C-i") 'wgrep-change-to-wgrep-mode))
#+END_SRC

* Custom functions
** Emacs lisp
*** Buffer
    My first function to have list-buffers (buffer menu)
#+BEGIN_SRC emacs-lisp
  (defun buffer-list-moveto ()
    "Open buffer list and jump to that window."
    (interactive)
    (list-buffers)
    (other-window 1 nil)
    )
  (global-set-key (kbd "C-x C-b") 'buffer-list-moveto)
#+END_SRC
